MATRIX CHAIN MULTIPLICATION (DYNAMIC PROGRAMMING) 

********   for base condition   ******** 
 i. think of the smallest valid input.
ii. think of the invalid input. 

MCM itself is a topic on which so many problems are based. The name of the problem which are based on the MCM format are:
1. MCM
2. Printing MCM
3. Evaluate expression to true/boolean parenthesization
4. Min/Max finding of an expression
5. Palindrome Partitioning
6. Scramble string
7. Egg dropping problem

****************  MCM  ******************
in MCM basically we are having an array where there is 2 indexes i and j, in which i may start from start or might be around start and j may be at end or around end. 
and in the recursive function we have a for loop k, which starts from i and end at j and in the loop we will find a temp ans which should be like that 
 int tempans=solve(arr, i, k) + //this + may be - or any operator according to the question. 
             solve(arr, k+1, j);  

and in the same loop we are finding our main answer that will be like max or min ---> ans=max(ans, tempans);

sometimes the k will be like k=i+1 instead of k=i and k=j+1 instead of k=j;

The MCM itself is a approach to solve many problems like palidrome partioning and many more. so to solve this problem first like we will be given with a array of size n 
and the number of matrixes we will be able to make is only n-1; 

see how to choose index i;
 if we start i from 0 then the matrixi will be formed as arr[i-1]*arr[i] but if i=0 then i-1 will be a negative indexso this will not work ..
 therefor i will start from 1 instead of 0. 

see how to choose index j;
  if we will take j as n then it will be out of bound thats why we need to take j as n-1 ;

calculating cost;
 calculation of cost = arr[i-1]*arr[k]*arr[j];

here basically we need to put parenthesis to such that the cost will be minimum so we need to check after putting parenthesis one by one and find the result as the minimum 
cost so first in the recursive code we will be running a loop basically which will be shifting the parenthesis the loop will start from i to j and inside the loop we will
be having a recursive call which is like solve(arr, i, k)+solve(arr, k+1, j)+(arr[i-1]*arr[j]*arr[k]) and a ans variable holding the min(ans, temp); 

for the loop also we need to have first check whether ir will start from i or i+1 and till j or j-1 like that 
in this case there are two possible ways to take k
i. k=i to k=j and while calling i to k and k+1 to j;
ii. k=i+1, k=j  and while calling i to k-1 and k to j;


CODE:
class Solution {
  public:
  
  int t[101][101];
    
    int solve(vector<int>&arr, int i, int j)
    {
        if(i>=j) return 0;
        
        if(t[i][j] != -1) return t[i][j];
        
        int mini=INT_MAX;
        
        for(int k=i; k<j; k++)
        {
            int temp=(arr[i-1]*arr[k]*arr[j]) +
                      solve(arr, i, k)+solve(arr, k+1, j);
                     
            
            mini=min(mini, temp);
        }
        
        return t[i][j]=mini;
    }
    int matrixMultiplication(vector<int> &arr) {
        // code here
        int n=arr.size();
        memset(t, -1, sizeof(t));
        return solve(arr, 1, n-1);
    }
};



BOOLEAN PARENTHESIZATION

https://www.geeksforgeeks.org/problems/boolean-parenthesization5610/1

You are given a boolean expression s containing
    'T' ---> true
    'F' ---> false 
and following operators between symbols
   &   ---> boolean AND
    |   ---> boolean OR
   ^   ---> boolean XOR
Count the number of ways we can parenthesize the expression so that the value of expression evaluates to true.

Note: The answer is guaranteed to fit within a 32-bit integer.

Examples:

Input: s = "T|T&F^T"
Output: 4
Explaination: The expression evaluates to true in 4 ways: ((T|T)&(F^T)), (T|(T&(F^T))), (((T|T)&F)^T) and (T|((T&F)^T)).

Input: s = "T^F|F"
Output: 2
Explaination: The expression evaluates to true in 2 ways: ((T^F)|F) and (T^(F|F)).

Constraints:

1 ≤ |s| ≤ 100 

APPROACH:
this problem is the variation of the matrix chain multiplication(MCM) by reading the problem itself we will get that we need to put the parenthesis in such a way that 
the expression will evaluates to true and we have to return the count in how many ways we will put the parenthesis so that the expression evaluates to true;

1. so here first we will find the indexes of i and j, so here i will start from 0 and j will went upto n-1 there will be no problem with this approach.

here while passing the values in the recursive solve function we will pass one more variable other than the i and j that is of boolean type named as isTrue.
this variable is needed as we need to count the number of false and true and after that with their combinations only we will be able to get in how many cases we will
get the expression as true.

and while evaluating the string we will find the lt, lf, rt, rf and based on that only we will get the ans ..

2. BASE CONDITION: 
    i. if(i>j) return 0; // there is no char in the string ..
   ii. if(i==j) //if there is only one char in the string then if the isTrue variable is true then check for the char present at the ith position based on that return 
              // 0 or 1.
      {
         if(isTrue==true)
          return s[i]=='T';
         else
          return s[i]=='F';
      }

3. for loop working
    here the k will starts from i+1 as the k always be at the operator and go till k<=j-1 and it will increment by 2 as the operator will be after the char.
      for(int k=i+1; k<=j-1; k=k+2)

4. calculating the temporary ans:
      int lf=solve(s, i, k-1, false);
      int lt=solve(s, i, k-1, true);
      int rf=solve(s, k+1, j, false);
      int rt=solve(s, k+1, j, true);

5. calculating the result using the temporary ans 
              if(s[k]=='&')
              {
                   if(isTrue==true)
                       ans=ans+lt*rt;
                   else 
                       ans=ans+lf*rf+lf*rt+lt*rf;
              }
              else if(s[k]=='|')
              {
                   if(isTrue==true)
                      ans+=(lt*rt)+(lt*rf)+(lf*rt);
                   else 
                      ans+=(lf*rf);
              }
              else if(s[k]=='^')
              {
                    if(isTrue==true) 
                          ans+=lt*rf+rt*lf;
                    else 
                          ans+=lt*rt+lf*rf;
              }
    
    5. returning the ans as result.    

CODE: 
int t[101][101][2];
    int solve(string &s,int i,int j,bool isTrue)
    {
          if(i>j) return 0;
          
          if(i==j)
          {
             if(isTrue==true) return s[i]=='T';
             else return s[i]=='F';
          }
          
          if(t[i][j][isTrue]!=-1)
           return t[i][j][isTrue];
          
          int ans=0;
          
           for(int k=i+1;k<j;k+=2)
           {
               
              int lt=solve(s,i,k-1,true);
              int lf=solve(s,i,k-1,false);
              int rt=solve(s,k+1,j,true);
              int rf=solve(s,k+1,j,false);
              
              if(s[k]=='&')
              {
                   if(isTrue==true) ans=ans+lt*rt;
                   else ans=ans+lf*rf+lf*rt+lt*rf;
              }
              else if(s[k]=='|')
              {
                   if(isTrue==true) ans+=(lt*rt)+(lt*rf)+(lf*rt);
                   else ans+=(lf*rf);
              }
              else if(s[k]=='^')
              {
                    if(isTrue==true) ans+=lt*rf+rt*lf;
                    else ans+=lt*rt+lf*rf;
              }
    
            }
             return t[i][j][isTrue]=ans;
    }
    int countWays(string &s) {
        // code here
        int n=s.size();
        memset(t, -1, sizeof(t));
        return solve(s, 0, n-1, true);
       
    }
};

