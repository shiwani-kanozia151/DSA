/*********************************   RECURSION  ********************************/ 

1. here basically we have choices and we have to take decisions based on it.. with this the input is becoming smaller only after taking the decisions.
2. like we need to find the subset of a string "abc" here the subset includes {}, {a}, {b}, {c}, {a,b}, {a,c}, {b,c}, {a,b,c}
3. see for {} ---> a(not taking 0), b(not taking 0), c(not taking 0).. //so here we have 2 choices for every char whether to take or not to take ..
       for{a} ---> a(taking 1), b(not taking 0), c(not taking 0)..
       for{b} ---> a(not taking 0), b(taking 1), c(not taking 0)..
       for{c} ---> a(not taking 0), b(not taking 0), c(taking 1)..
       for{a,b}---> a(taking 1), b(taking 1), c(not taking 0)..
       for{b,c}---> a(not taking 0), b(taking 1), c(taking 1)..
       for{a,c}---> a(taking 1), b( not taking 0), c(taking 1)..
       for{a,b, c}---> a(taking 1), b(taking 1), c(taking 1).. 

4. as to give a proper representation to these decision for this we are using a recursive tree diagram approach .. the input/output method...
     output                input
      |                      |
      |                      | 
    output1 input         output2 input

5.  for any recursion related problem there are 2 things to keep in mind 
     i. design the recursive tree..
     ii. code the problem..

6. Recursion is basically everywhere like it can be used to solve the problems based on arrays, strings, trees, graphs, heap, dp, backtracking, divide and conquer
   and many more data structures uses recursion.

7. NEW METHOD
  Base Condition + Hypothesis + Induction
  base condition: think of the smallest valid input ....

8. 3 methods to solve a recursive problem
   i. using the the recursive tree approach ( when we know about DECISIONS)
  ii. using the base condition, induction and hypothesis approach (input ko smaller krna hai us case me ise use krte hai)
 iii. using the choice diagram approach (usually using it in dp )

9. basically in case of IBH we dont need to go till leaf node thats why the problem that are solve using this approach is like we will think that if this is working for
   this input then it will also work one less than that input as well.

10. simple    -------> IBH
    medium    --------> recursive tree
    hard      --------> choice diagram

11.  explaining the IBH approach using one example printing 1 to n using recursion
     void print(int n)
     {
         if(n==1) // base condition .....
         {
            cout<<n;       
            return;
         }

         print(n-1); // hypothesis.....
         cout<<n;// induction....
    }

//see basically hypothesis ko hum kaise bhi design kr sakte hai bus jo difference ata hai voh ata hai use work krane me voh depend krta hai induction step me ki usme kya
code likhne vale ho...

12. height of the binary tree using recursion..
   see here in this problem basically first we will think for the input given to us --> root of the tree..
   then base case --> root==NULL return 0; as the answer.
   then the hypothesis wil be going towards the smaller input here the smaller input will be left subtree and right subtree basically..
   then the induction part is there which is here in this case is finding the max(lh, rh)+1; here finding the max is because there might be case like either of 2, there
   might be one side longer than the other.. and adding 1 because that particular node also be included. 

13. sorting an array using recursion...
    as to sort an array basically here we will need to use recursion 2 times one for sorting logic and one for inserting like while sorting we need to insert the elements 
    at the right position so for this we need another recursive function..
   
   void sort(vector<int>&arr)
   {
       if(arr.size()==1) return;
       
       int temp=arr[arr.size()-1]; //start of hypothesis...
       arr.pop_back();
       
       sort(arr);  //end of hypothesis...
       insert(arr, temp); //induction...
  }

 void insert(vector<int>&arr, int x)
 {
    if(arr.size()==0 || arr.back()<x)
    {
       arr.push_back(x);
       return;
    }

   int temp=arr[arr.size()-1]; //start of hypothesis...
   arr.pop_back();

   insert(arr, x); //end of hypothesis....
   arr.push_back(temp); //induction...

 }


14. sorting a stack .
    the approach to sort a stack is exactly same as the sorting the array there is only minor changes in this

    void sort(stack<int>&st)
   {
       if(st.size()==1) return;
       
       int temp=st.top(); //start of hypothesis...
       st.pop();
       
       sort(st);  //end of hypothesis...
       insert(st, temp); //induction...
  }

 void insert(stack<int>&st, int x)
 {
    if(st.size()==0 || st.top()<=x)
    {
       st.push(x);
       return;
    }

   int temp=st.top(); //start of hypothesis...
   st.pop();

   insert(st, x); //end of hypothesis....
   st.push(temp); //induction...

 }


15. Deleting the middle element of the stack...
    
   basically i got the idea to solve this problem by myself here in this problem 
   i. find the size of the st and the indexof the middle element by n/2+1;
  ii. then write a void function which is using recursion..
      base condition: if(count==k-1) st.pop(); return; //first passing count as 0 after reaching to k-1 then simply just pop the element
      induction and hypothesis keep on putting the top element in a variable as soon as the base condition hit the kth 
      element has been removed and after that push the popped element to the top of the stack like thta...

  CODE: 

  class Solution {
  public:
    // Function to delete middle element of a stack.
    void solve(stack<int>&st, int count, int k)
    {
        if(count==k-1)//base case..
        {
            st.pop();
            return;
        }
        
        int temp=st.top();//hypothesis start...
        st.pop();
        
        solve(st, count+1, k);//hypothesis end...
        
        st.push(temp);//induction....
    }
    void deleteMid(stack<int>& s) {
        // code here..
        int n=s.size();
        int k;
        
         k=(n/2)+1;
         
        return solve(s, 0, k);
    }
};


16. Reversing a stack using recursion..
 here basically imagine the case of hypothesis how it is working 
 like if we are given with a stack[2,3,4,5] then required output will be [5,4,3,2]
 then call the function for [3,4,5[ then required output will be [5,4,3]..
 then call the functon [4,5] then required output will be [5,4] .
but one thing is there whne we will be [4,5] expecting [5,4,3] so for that first we need to pop the all the element from
the stack and after that we will need to put the required element at bottom and then again push all the elements..

CODE:

class Solution{
public:
    
    void insert(stack<int> &St, int x)
    {
        if(St.empty()) //base case
        {
            St.push(x);
            return;
        }
         
        int temp=St.top();//hypothesis starting..
        St.pop();
        
        insert(St, x);//hypothesis end...
        
        St.push(temp); //induction....
    }
    void Reverse(stack<int> &St){
        
        if(St.size()==0) //base condition....
         return;
         
        int temp=St.top();//hypothesis start...
        St.pop();
        
        Reverse(St); //hypothesis end...
        
        insert(St, temp);//induction .....
    }
};



16. Kth symbol in grammar
    if N=0 and K=0 return 0.
  N=0     0
  N=1     0 1
  N=2     0 1 1 0
  N=3     0 1 1 0 1 0 0 1
  N=4     0 1 1 0 1 0 0 1 1 0 0 1 0 1 1 0 
  N=5    ........

 see in this problem they will ask like tell the digit which is present at particular N and K like 4,6 -->0 
 this means 4th row and 6th column 
 here we have noticed that the elements present in a particular row is 2^n ..

so here 1 thing to observe is that if we are moving to the next row then the half bits are same as the above row and
half bits are the complement of the above row. so this will help to design the algo 

base case: if N=0 && K=0 return 0;
mid=pow(2,N)/2
if(K<=N) //agr less than N hoga toh upper vale se same hoga..
 solve(N-1, k);
else
 !solve(N-1, k-mid)//agr more than N hoga toh mid se minus krna padega K ko and uska complement nikalna padega
                    then only we will be able to get the exact answer what we want.

 CODE:

          if(n==1 && k==1)
             return 0;

          int mid=pow(2,n-1)/2;

          if(k<=mid)
           return kthGrammar(n-1,k);
          else 
           return !(kthGrammar(n-1,k-mid));   



17. Tower of Hanoi
     HINDU METHODOLOGY:
     there is a temple in south of brahma god and while creating the universe he had told priests to transwer all the plate
     from towerA to TowerC with the help of TowerB and he told 2 conditions that
     i. only 1 plate transer from one tower to another in one time
    ii. and large plate can't be place over the small plate.
  he gave 64 plates in towerA and told them to transfer it to the towerC with the help of towerB..
  the problem is looking very easy but it is not that much easy to transfer a plate 1 sec is required so to transfer 64 paltes
  it is required 2^64 time which is very huge 2^30 is 1billion and it will be 2^4*2^302^30 = 16billion .

  so to solve this problem we are using recursion..
  base case: if(n==1) move plate from towerA to towerC 

   calling for n-1 plates for that we should take help from towerB
   solve(n, s-->d, h)
   solve(n-1, s-->h, d)

 //program to count how much conversion needs to transfer a bunch of plates from A to C.
    class Solution {
  public:
    // You need to complete this function
    int count=0;
    void solve(int n, int from, int to, int aux)
    {
        if(n>0)
        {
             solve(n-1, from, aux, to);
       
             count++;
        
             solve(n-1, aux, to, from);
        }
      
        
    }
    int towerOfHanoi(int n, int from, int to, int aux) {
        
        solve(n, from, to, aux);
        
        return count;
    }
};



18.   PRINT SUBSETS AND POWERSET 
      given: "ab"  output: "", "a", "b", "ab"

      RECURSIVE TREE..

                       op                     ip
                       ""                    "ab"
                                     |
         (not taking) op1   ip1           (taking) op2 ip2 
                      ""    "b"                    "a"  "b"
                         |                             |
           op1  ip1           op2   ip2        op1  ip1         op2   ip2
           ""    ""           "b"   ""          "a"  ""         "ab"   ""    


   solve(string op, string ip)
   {
        if(ip.size()==0)
        {
           cout<<op;
            return;
        }

        string op1=op;
        string op2=op;

        op2.push_back(ip[0]);
        ip.erase(ip.begin()+0);

        solve(op1, ip); 
        solve(op2, ip);
   
        return ;
   }



19. PRINT UNIQUE SUBSET AND VARIATIONS.. (when repeated characters are given)
    To print the unique subset we are using set of string or we can use map to store them if it is already present in 
    any of this data structure then no need to insert again ..



20. PERMUTATION WITH SPACES..

   given: "abc"  output: "a_bc", "a_b_c", "ab_c", "abc"

                         op:"a"                  ip: "abc"  
                                        |
   (not taking space)op1       ip1               op2       ip2
                    "ab"        "c"              "a_b"     "c"
                          |                              |
              op1  ip1         op2    ip2        op1     ip1      op2   ip2
             "abc"  ""         "ab_c"  ""        "a_bc"  ""       "a_b_c" ""

 
  string op:ip[0];
  ip.erase(ip.begin()+0);

   solve(string op, string ip)
   {
        if(ip.size()==0)
        {
            cout<<op;
            return;
        }

         string op1=op;
         string op2=op;
         op1.push_back(ip[0]); 
         op2.push_back("-");
         op2.push_back(ip[0]);

         ip.erase(ip.begin()+0);

         solve(op1, ip);
         solve(op2, ip);
         return;
  }


21. PERMUTATION WITH CASE CHANGE
     given: "ab"   output: "aB", "ab", "Ab", "AB" 

                      op                      ip        
                      ""                     "ab"
                                  |
                 op1    ip1                 op2   ip2
                "a"     "b"                "A"   "b"
                     |                           |
           op1  ip1        op2   ip2        op1   ip1   op2   ip2
          "ab"   ""        "aB"   ""         "Ab"  ""   "AB"  ""    



    solve(String op, string ip)
    {
          if(ip.size()==0) 
          {
               cout<<op;
               return;
          }

         string op1: op;
         string op2:op;

         op1.push_back(ip[0]);
         op2.push_back(to_upper(ip[0]);

         ip.erase(ip.begin()+0);

         solve(op1, ip);
         solve(op2, ip);
     }


22.  GENERATE ALL BALANCED PARANTHESES... 
